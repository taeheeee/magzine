{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coms\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\hanghae-react-intensive\\\\week2\\\\src\\\\pages\\\\PostList.js\",\n    _s = $RefreshSig$();\n\n// PostList.js\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Post from \"../components/Post\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport InfinityScroll from \"../shared/InfinityScroll\";\nimport { Grid } from '';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const post_list = useSelector(state => state.post.list);\n  const user_info = useSelector(state => state.user.user);\n  const is_loading = useSelector(state => state.post.is_loading);\n  const paging = useSelector(state => state.post.paging); // 이컴포넌트에서 한번만 가지고오면되니깐\n\n  React.useEffect(() => {\n    if (post_list.length === 0) {\n      dispatch(postActions.getPostFB());\n    }\n  }, []);\n  console.log(post_list);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(InfinityScroll, {\n      callNext: () => {\n        dispatch(postActions.getPostFB(paging.next));\n      },\n      is_next: paging.next ? true : false,\n      loading: is_loading,\n      children: post_list.map((p, idx) => {\n        if (user_info && p.user_info.user_id === user_info.uid) {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(Post, { ...p,\n              is_me: true\n            }, p.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this), \";\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Post, { ...p\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 20\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostList, \"Z1NBbvDwQ3UlvEK5/PNDqnmDgb0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/pages/PostList.js"],"names":["React","useSelector","useDispatch","Post","actionCreators","postActions","InfinityScroll","Grid","PostList","props","dispatch","post_list","state","post","list","user_info","user","is_loading","paging","useEffect","length","getPostFB","console","log","next","map","p","idx","user_id","uid","id"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,cAAc,IAAIC,WAA3B,QAA8C,uBAA9C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAAQC,IAAR,QAAmB,EAAnB;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,SAAS,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,IAAvB,CAA7B;AACA,QAAMC,SAAS,GAAGd,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACI,IAAN,CAAWA,IAAvB,CAA7B;AACA,QAAMC,UAAU,GAAGhB,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWI,UAAvB,CAA9B;AACA,QAAMC,MAAM,GAAGjB,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWK,MAAvB,CAA1B,CAL0B,CAM1B;;AACAlB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB,QAAIR,SAAS,CAACS,MAAV,KAAqB,CAAzB,EAA4B;AAC1BV,MAAAA,QAAQ,CAACL,WAAW,CAACgB,SAAZ,EAAD,CAAR;AACD;AACF,GAJD,EAIG,EAJH;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BAEE,QAAC,cAAD;AACE,MAAA,QAAQ,EAAE,MAAM;AACdD,QAAAA,QAAQ,CAACL,WAAW,CAACgB,SAAZ,CAAsBH,MAAM,CAACM,IAA7B,CAAD,CAAR;AACD,OAHH;AAIE,MAAA,OAAO,EAAEN,MAAM,CAACM,IAAP,GAAc,IAAd,GAAqB,KAJhC;AAKE,MAAA,OAAO,EAAEP,UALX;AAAA,gBAOGN,SAAS,CAACc,GAAV,CAAc,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACzB,YAAIZ,SAAS,IAAIW,CAAC,CAACX,SAAF,CAAYa,OAAZ,KAAwBb,SAAS,CAACc,GAAnD,EAAwD;AACtD,8BACE,QAAC,IAAD;AAAA,oCACE,QAAC,IAAD,OAAqBH,CAArB;AAAwB,cAAA,KAAK;AAA7B,eAAWA,CAAC,CAACI,EAAb;AAAA;AAAA;AAAA;AAAA,oBADF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD,SATD,MASO;AACL,8BAAO,QAAC,IAAD,OAAqBJ;AAArB,aAAWA,CAAC,CAACI,EAAb;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;AACF,OAbA;AAPH;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA1CD;;GAAMtB,Q;UACaN,W,EACCD,W,EACAA,W,EACCA,W,EACJA,W;;;KALXO,Q;AA4CN,eAAeA,QAAf","sourcesContent":["// PostList.js\r\nimport React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Post from \"../components/Post\";\r\nimport { actionCreators as postActions } from \"../redux/modules/post\";\r\nimport InfinityScroll from \"../shared/InfinityScroll\";\r\nimport {Grid} from ''\r\nconst PostList = (props) => {\r\n  const dispatch = useDispatch();\r\n  const post_list = useSelector((state) => state.post.list);\r\n  const user_info = useSelector((state) => state.user.user);\r\n  const is_loading = useSelector((state) => state.post.is_loading);\r\n  const paging = useSelector((state) => state.post.paging);\r\n  // 이컴포넌트에서 한번만 가지고오면되니깐\r\n  React.useEffect(() => {\r\n    if (post_list.length === 0) {\r\n      dispatch(postActions.getPostFB());\r\n    }\r\n  }, []);\r\n\r\n  console.log(post_list);\r\n  return (\r\n    <React.Fragment>\r\n      {/* map을이용하여 개수만큼 포스트불러오기 */}\r\n      <InfinityScroll\r\n        callNext={() => {\r\n          dispatch(postActions.getPostFB(paging.next));\r\n        }}\r\n        is_next={paging.next ? true : false}\r\n        loading={is_loading}\r\n      >\r\n        {post_list.map((p, idx) => {\r\n          if (user_info && p.user_info.user_id === user_info.uid) {\r\n            return (\r\n              <Grid>\r\n                <Post key={p.id} {...p} is_me />;\r\n              </Grid>\r\n\r\n\r\n            );\r\n\r\n          } else {\r\n            return <Post key={p.id} {...p} />;\r\n          }\r\n        })}\r\n      </InfinityScroll>\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n"]},"metadata":{},"sourceType":"module"}