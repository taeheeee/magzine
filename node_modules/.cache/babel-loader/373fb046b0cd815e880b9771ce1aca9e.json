{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { storage } from \"../../shared/firebase\"; // actions\n\nconst UPLOADING = \"UPLOADING\";\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst SET_PREVIEW = \"SET_PREVIEW\"; // action creators\n\nconst uploading = createAction(UPLOADING, uploading => ({\n  uploading\n}));\nconst uploadImage = createAction(UPLOAD_IMAGE, image_url => ({\n  image_url\n}));\nconst setPreview = createAction(SET_PREVIEW, preview => ({\n  preview\n})); //firebase에 이미지 업로드\n\nfunction uploadImageFB(image) {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    dispatch(uploading(true));\n    console.log(`images/${new Date().getTime()}_${image.name}`);\n\n    const _upload = storage.ref(`images/${image.name}`).put(image); //   업로드!\n\n\n    _upload.then(snapshot => {\n      console.log(snapshot); // 업로드한 파일의 다운로드 경로를 가져오자!\n\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        dispatch(uploadImage(url));\n      });\n    }).catch(err => {\n      dispatch(uploading(false));\n    });\n  };\n} // initial state\n\n\nconst initialState = {\n  image_url: \"http://via.placeholder.com/400x300\",\n  uploading: false,\n  preview: null\n}; // reducer\n\nexport default handleActions({\n  [UPLOAD_IMAGE]: (state, action) => produce(state, draft => {\n    draft.image_url = action.payload.image_url;\n    draft.uploading = false;\n  }),\n  [UPLOADING]: (state, action) => produce(state, draft => {\n    draft.uploading = action.payload.uploading;\n  }),\n  [SET_PREVIEW]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  })\n}, initialState);\nconst actionCreators = {\n  uploadImage,\n  uploadImageFB,\n  setPreview\n};\nexport { actionCreators };","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/redux/modules/image.js"],"names":["createAction","handleActions","produce","storage","UPLOADING","UPLOAD_IMAGE","SET_PREVIEW","uploading","uploadImage","image_url","setPreview","preview","uploadImageFB","image","dispatch","getState","history","console","log","Date","getTime","name","_upload","ref","put","then","snapshot","getDownloadURL","url","catch","err","initialState","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport produce from \"immer\";\r\n\r\nimport { storage } from \"../../shared/firebase\";\r\n\r\n// actions\r\nconst UPLOADING = \"UPLOADING\";\r\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\r\nconst SET_PREVIEW = \"SET_PREVIEW\";\r\n\r\n// action creators\r\nconst uploading = createAction(UPLOADING, (uploading) => ({ uploading }));\r\nconst uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({ image_url }));\r\n\r\nconst setPreview = createAction(SET_PREVIEW, (preview) => ({ preview }));\r\n\r\n//firebase에 이미지 업로드\r\nfunction uploadImageFB(image) {\r\n    return function (dispatch, getState, { history }) {\r\n        dispatch(uploading(true));\r\n\r\n        console.log(`images/${new Date().getTime()}_${image.name}`);\r\n        const _upload = storage.ref(`images/${image.name}`).put(image);\r\n\r\n        //   업로드!\r\n        _upload\r\n            .then((snapshot) => {\r\n                console.log(snapshot);\r\n\r\n                // 업로드한 파일의 다운로드 경로를 가져오자!\r\n                snapshot.ref.getDownloadURL().then((url) => {\r\n                    console.log(url);\r\n                    dispatch(uploadImage(url));\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                dispatch(uploading(false));\r\n            });\r\n    };\r\n}\r\n\r\n// initial state\r\nconst initialState = {\r\n    image_url: \"http://via.placeholder.com/400x300\",\r\n    uploading: false,\r\n    preview: null,\r\n};\r\n\r\n// reducer\r\nexport default handleActions(\r\n    {\r\n        [UPLOAD_IMAGE]: (state, action) =>\r\n            produce(state, (draft) => {\r\n                draft.image_url = action.payload.image_url;\r\n                draft.uploading = false;\r\n            }),\r\n\r\n        [UPLOADING]: (state, action) =>\r\n            produce(state, (draft) => {\r\n                draft.uploading = action.payload.uploading;\r\n            }),\r\n        [SET_PREVIEW]: (state, action) =>\r\n            produce(state, (draft) => {\r\n                draft.preview = action.payload.preview;\r\n            }),\r\n    },\r\n    initialState\r\n);\r\n\r\nconst actionCreators = {\r\n    uploadImage,\r\n    uploadImageFB,\r\n    setPreview,\r\n};\r\n\r\nexport { actionCreators };\r\n"]},"metadata":{},"sourceType":"module"}