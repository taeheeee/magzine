{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\coms\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\hanghae-react-intensive\\\\week2\\\\src\\\\pages\\\\PostDetail.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Post from \"../components/Post\";\nimport CommentList from \"../components/CommentList\";\nimport CommentWrite from \"../components/CommentWrite\";\nimport { useSelector } from \"react-redux\";\nimport user from \"../redux/modules/user\";\nimport { firestore } from \"../shared/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostDetail = props => {\n  _s();\n\n  const id = props.match.params.id;\n  console.log(id);\n  const user_info = useSelector(state => state.user.user);\n  const post_list = useSelector(store => store.post.list);\n  const post_idx = post_list.findIndex(p => p.id === id);\n  const post_data = post_list[post_idx];\n  const [post, setPost] = React.useState(post_data ? post_data : null);\n  React.useEffect(() => {\n    const postDB = firestore.collection(\"post\");\n    postDB.doc(id).get().then(doc => {\n      console.log(doc);\n      console.log(doc.data());\n\n      let _post = doc.data(); //[\"commenct_cnt\", \"content\", ...](딕셔너리의 키값들로 배열을 만들어주어라)\n\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        //   3-3강의\n        if (cur.indexOf(\"user_\") !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: doc.id,\n        user_info: {}\n      });\n      setPost();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Post, { ...post,\n      is_me: post.user_info.user_id === user_info.uid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentWrite, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostDetail, \"LsGHnZmfETUkJxQFauBA8YdU/wQ=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PostDetail;\nexport default PostDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/pages/PostDetail.js"],"names":["React","Post","CommentList","CommentWrite","useSelector","user","firestore","PostDetail","props","id","match","params","console","log","user_info","state","post_list","store","post","list","post_idx","findIndex","p","post_data","setPost","useState","useEffect","postDB","collection","doc","get","then","data","_post","Object","keys","reduce","acc","cur","indexOf","user_id","uid"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,SAAT,QAA0B,oBAA1B;;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,EAAE,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,QAAMK,SAAS,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACV,IAAN,CAAWA,IAAvB,CAA7B;AACA,QAAMW,SAAS,GAAGZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,IAAvB,CAA7B;AAEA,QAAMC,QAAQ,GAAGJ,SAAS,CAACK,SAAV,CAAqBC,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASA,EAApC,CAAjB;AACA,QAAMc,SAAS,GAAGP,SAAS,CAACI,QAAD,CAA3B;AAEA,QAAM,CAACF,IAAD,EAAMM,OAAN,IAAkBxB,KAAK,CAACyB,QAAN,CAAeF,SAAS,GAACA,SAAD,GAAW,IAAnC,CAAxB;AACAvB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGrB,SAAS,CAACsB,UAAV,CAAqB,MAArB,CAAf;AACAD,IAAAA,MAAM,CACHE,GADH,CACOpB,EADP,EAEGqB,GAFH,GAGGC,IAHH,CAGSF,GAAD,IAAS;AACbjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAG,CAACG,IAAJ,EAAZ;;AAEA,UAAIC,KAAK,GAAGJ,GAAG,CAACG,IAAJ,EAAZ,CAJa,CAKX;;;AACA,UAAId,IAAI,GAAGgB,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ;AACA,YAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,iBAAO,EACL,GAAGF,GADE;AAELvB,YAAAA,SAAS,EAAE,EACT,GAAGuB,GAAG,CAACvB,SADE;AAET,eAACwB,GAAD,GAAOL,KAAK,CAACK,GAAD;AAFH;AAFN,WAAP;AAOD;;AACD,eAAO,EAAE,GAAGD,GAAL;AAAU,WAACC,GAAD,GAAOL,KAAK,CAACK,GAAD;AAAtB,SAAP;AACD,OAbQ,EAcT;AACE7B,QAAAA,EAAE,EAAEoB,GAAG,CAACpB,EADV;AAEEK,QAAAA,SAAS,EAAE;AAFb,OAdS,CAAX;AAmBAU,MAAAA,OAAO;AACV,KA7BH;AA8BD,GAhCD,EAgCG,EAhCH;AAkCA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,IAAD,OAAUN,IAAV;AAAgB,MAAA,KAAK,EAAEA,IAAI,CAACJ,SAAL,CAAe0B,OAAf,KAA2B1B,SAAS,CAAC2B;AAA5D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApDD;;GAAMlC,U;UAIcH,W,EACAA,W;;;KALdG,U;AAsDN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport Post from \"../components/Post\";\r\nimport CommentList from \"../components/CommentList\";\r\nimport CommentWrite from \"../components/CommentWrite\";\r\nimport { useSelector } from \"react-redux\";\r\nimport user from \"../redux/modules/user\";\r\nimport { firestore } from \"../shared/firebase\";\r\nconst PostDetail = (props) => {\r\n  const id = props.match.params.id;\r\n\r\n  console.log(id);\r\n  const user_info = useSelector((state) => state.user.user);\r\n  const post_list = useSelector((store) => store.post.list);\r\n  \r\n  const post_idx = post_list.findIndex((p) => p.id === id);\r\n  const post_data = post_list[post_idx];\r\n\r\n  const [post,setPost]  = React.useState(post_data?post_data:null);\r\n  React.useEffect(() => {\r\n    const postDB = firestore.collection(\"post\");\r\n    postDB\r\n      .doc(id)\r\n      .get()\r\n      .then((doc) => {\r\n        console.log(doc);\r\n        console.log(doc.data());\r\n\r\n        let _post = doc.data()\r\n          //[\"commenct_cnt\", \"content\", ...](딕셔너리의 키값들로 배열을 만들어주어라)\r\n          let post = Object.keys(_post).reduce(\r\n            (acc, cur) => {\r\n              //   3-3강의\r\n              if (cur.indexOf(\"user_\") !== -1) {\r\n                return {\r\n                  ...acc,\r\n                  user_info: {\r\n                    ...acc.user_info,\r\n                    [cur]: _post[cur],\r\n                  },\r\n                };\r\n              }\r\n              return { ...acc, [cur]: _post[cur] };\r\n            },\r\n            {\r\n              id: doc.id,\r\n              user_info: {},\r\n            }\r\n          );\r\n          setPost()\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Post {...post} is_me={post.user_info.user_id === user_info.uid} />\r\n      <CommentWrite />\r\n      <CommentList />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n"]},"metadata":{},"sourceType":"module"}