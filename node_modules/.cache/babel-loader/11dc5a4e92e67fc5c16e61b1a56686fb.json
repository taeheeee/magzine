{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\"; // 액션타입\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\"; // 액셩생성자\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst getCommentFB = function () {\n  let post_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n\n    // post_id가 없으면 애초에 쿼리 검색을 x => if문써서 확인먼저\n    if (!post_id) {\n      return;\n    } // firestore에서(collection) 가져오기\n\n\n    const commentDB = firestore.collection(\"comment\"); // 쿼리문법\n\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id\n        });\n      });\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {}),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","getCommentFB","dispatch","getState","history","commentDB","collection","where","orderBy","get","then","docs","forEach","doc","push","data","id","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,OAAO,GAAG,SAAhB,C,CAEA;;AACA,MAAMC,UAAU,GAAGR,YAAY,CAACK,WAAD,EAAc,CAACI,OAAD,EAAUC,YAAV,MAA4B;AACvED,EAAAA,OADuE;AAEvEC,EAAAA;AAFuE,CAA5B,CAAd,CAA/B;AAIA,MAAMC,UAAU,GAAGX,YAAY,CAACM,WAAD,EAAc,CAACG,OAAD,EAAUG,OAAV,MAAuB;AAClEH,EAAAA,OADkE;AAElEG,EAAAA;AAFkE,CAAvB,CAAd,CAA/B;AAKA,MAAMC,OAAO,GAAGb,YAAY,CAACO,OAAD,EAAWO,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBF,EAAAA,UAAU,EAAE;AAFO,CAArB;;AAKA,MAAMG,YAAY,GAAG,YAAoB;AAAA,MAAnBR,OAAmB,uEAAT,IAAS;AACvC,SAAO,UAAUS,QAAV,EAAoBC,QAApB,QAA2C;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;;AAChD;AACA,QAAI,CAACX,OAAL,EAAc;AACZ;AACD,KAJ+C,CAMhD;;;AACA,UAAMY,SAAS,GAAGlB,SAAS,CAACmB,UAAV,CAAqB,SAArB,CAAlB,CAPgD,CAShD;;AACAD,IAAAA,SAAS,CACNE,KADH,CACS,SADT,EACoB,IADpB,EAC0Bd,OAD1B,EAEGe,OAFH,CAEW,WAFX,EAEwB,MAFxB,EAGGC,GAHH,GAIGC,IAJH,CAISC,IAAD,IAAU;AACZ,UAAIX,IAAI,GAAG,EAAX;AAEAW,MAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAO;AAChBb,QAAAA,IAAI,CAACc,IAAL,CAAU,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAeC,UAAAA;AAAf,SAAV;AACH,OAFD;AAGH,KAVH;AAWD,GArBD;AAsBD,CAvBD;;AAyBA,eAAe/B,aAAa,CAC1B;AACE,GAACI,WAAD,GAAe,CAAC4B,KAAD,EAAQC,MAAR,KAAmBhC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAW,CAAE,CAArB,CAD3C;AAEE,GAAC7B,WAAD,GAAe,CAAC2B,KAAD,EAAQC,MAAR,KAAmBhC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAW,CAAE,CAArB,CAF3C;AAGE,GAAC5B,OAAD,GAAW,CAAC0B,KAAD,EAAQC,MAAR,KACThC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACrB,UAAN,GAAmBoB,MAAM,CAACE,OAAP,CAAetB,UAAlC;AACD,GAFM;AAJX,CAD0B,EAS1BC,YAT0B,CAA5B;AAYA,MAAMsB,cAAc,GAAG;AACrBpB,EAAAA,YADqB;AAErBT,EAAAA,UAFqB;AAGrBG,EAAAA;AAHqB,CAAvB;AAMA,SAAS0B,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport { produce } from \"immer\";\r\nimport { firestore } from \"../../shared/firebase\";\r\nimport \"moment\";\r\nimport moment from \"moment\";\r\n\r\n// 액션타입\r\nconst SET_COMMENT = \"SET_COMMENT\";\r\nconst ADD_COMMENT = \"ADD_COMMENT\";\r\nconst LOADING = \"LOADING\";\r\n\r\n// 액셩생성자\r\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\r\n  post_id,\r\n  comment_list,\r\n}));\r\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\r\n  post_id,\r\n  comment,\r\n}));\r\n\r\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\r\n\r\nconst initialState = {\r\n  list: {},\r\n  is_loading: false,\r\n};\r\n\r\nconst getCommentFB = (post_id = null) => {\r\n  return function (dispatch, getState, { history }) {\r\n    // post_id가 없으면 애초에 쿼리 검색을 x => if문써서 확인먼저\r\n    if (!post_id) {\r\n      return;\r\n    }\r\n\r\n    // firestore에서(collection) 가져오기\r\n    const commentDB = firestore.collection(\"comment\");\r\n\r\n    // 쿼리문법\r\n    commentDB\r\n      .where(\"post_id\", \"==\", post_id)\r\n      .orderBy(\"insert_dt\", \"desc\")\r\n      .get()\r\n      .then((docs) => {\r\n          let list = [];\r\n\r\n          docs.forEach((doc)=>{\r\n              list.push({...doc.data(),id})\r\n          })\r\n      });\r\n  };\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_COMMENT]: (state, action) => produce(state, (draft) => {}),\r\n    [ADD_COMMENT]: (state, action) => produce(state, (draft) => {}),\r\n    [LOADING]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.is_loading = action.payload.is_loading;\r\n      }),\r\n  },\r\n  initialState\r\n);\r\n\r\nconst actionCreators = {\r\n  getCommentFB,\r\n  setComment,\r\n  addComment,\r\n};\r\n\r\nexport { actionCreators };\r\n"]},"metadata":{},"sourceType":"module"}