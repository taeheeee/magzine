{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\"; // 액션타입\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\"; // 액셩생성자\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst getCommentFB = function () {\n  let post_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n\n    // post_id가 없으면 애초에 쿼리 검색을 x => if문써서 확인먼저\n    if (!post_id) {\n      return;\n    } // firestore에서(collection) 가져오기\n\n\n    const commentDB = firestore.collection(\"comment\"); // 쿼리문법\n\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy();\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {}),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","getCommentFB","dispatch","getState","history","commentDB","collection","where","orderBy","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,OAAO,GAAG,SAAhB,C,CAGA;;AACA,MAAMC,UAAU,GAAGR,YAAY,CAACK,WAAD,EAAc,CAACI,OAAD,EAAUC,YAAV,MAA4B;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAA5B,CAAd,CAA/B;AACA,MAAMC,UAAU,GAAGX,YAAY,CAACM,WAAD,EAAc,CAACG,OAAD,EAAUG,OAAV,MAAuB;AAACH,EAAAA,OAAD;AAAUG,EAAAA;AAAV,CAAvB,CAAd,CAA/B;AAEA,MAAMC,OAAO,GAAGb,YAAY,CAACO,OAAD,EAAWO,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBF,EAAAA,UAAU,EAAE;AAFO,CAArB;;AAKA,MAAMG,YAAY,GAAG,YAAkB;AAAA,MAAjBR,OAAiB,uEAAT,IAAS;AACnC,SAAO,UAASS,QAAT,EAAmBC,QAAnB,QAAuC;AAAA,QAAV;AAACC,MAAAA;AAAD,KAAU;;AAC1C;AACA,QAAG,CAACX,OAAJ,EAAY;AACX;AACA,KAJyC,CAM1C;;;AACA,UAAMY,SAAS,GAAGlB,SAAS,CAACmB,UAAV,CAAqB,SAArB,CAAlB,CAP0C,CAS1C;;AACAD,IAAAA,SAAS,CAACE,KAAV,CAAgB,SAAhB,EAA0B,IAA1B,EAA+Bd,OAA/B,EAAwCe,OAAxC;AAEH,GAZD;AAaH,CAdD;;AAiBA,eAAevB,aAAa,CAC1B;AACI,GAACI,WAAD,GAAe,CAACoB,KAAD,EAAQC,MAAR,KAAmBxB,OAAO,CAACuB,KAAD,EAASE,KAAD,IAAW,CAE3D,CAFwC,CAD7C;AAII,GAACrB,WAAD,GAAe,CAACmB,KAAD,EAAQC,MAAR,KAAmBxB,OAAO,CAACuB,KAAD,EAASE,KAAD,IAAU,CAE1D,CAFwC,CAJ7C;AAOI,GAACpB,OAAD,GAAW,CAACkB,KAAD,EAAQC,MAAR,KACXxB,OAAO,CAACuB,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACb,UAAN,GAAmBY,MAAM,CAACE,OAAP,CAAed,UAAlC;AACD,GAFM;AARX,CAD0B,EAa1BC,YAb0B,CAA5B;AAgBA,MAAMc,cAAc,GAAG;AACrBZ,EAAAA,YADqB;AAErBT,EAAAA,UAFqB;AAGrBG,EAAAA;AAHqB,CAAvB;AAMA,SAASkB,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport { produce } from \"immer\";\r\nimport { firestore } from \"../../shared/firebase\";\r\nimport \"moment\";\r\nimport moment from \"moment\";\r\n\r\n// 액션타입\r\nconst SET_COMMENT = \"SET_COMMENT\";\r\nconst ADD_COMMENT = \"ADD_COMMENT\";\r\nconst LOADING = \"LOADING\";\r\n\r\n\r\n// 액셩생성자\r\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({post_id, comment_list}));\r\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({post_id, comment}));\r\n\r\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\r\n\r\nconst initialState = {\r\n  list: {},\r\n  is_loading: false,\r\n};\r\n\r\nconst getCommentFB = (post_id=null) => {\r\n    return function(dispatch, getState, {history}){\r\n        // post_id가 없으면 애초에 쿼리 검색을 x => if문써서 확인먼저\r\n        if(!post_id){\r\n         return;   \r\n        }\r\n\r\n        // firestore에서(collection) 가져오기\r\n        const commentDB = firestore.collection(\"comment\");\r\n\r\n        // 쿼리문법\r\n        commentDB.where(\"post_id\",\"==\",post_id).orderBy();\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default handleActions(\r\n  {\r\n      [SET_COMMENT]: (state, action) => produce(state, (draft) => {\r\n\r\n      }),\r\n      [ADD_COMMENT]: (state, action) => produce(state, (draft)=> {\r\n\r\n      }),\r\n      [LOADING]: (state, action) => \r\n      produce(state, (draft) => {\r\n        draft.is_loading = action.payload.is_loading;\r\n      })\r\n  },\r\n  initialState\r\n);\r\n\r\nconst actionCreators = {\r\n  getCommentFB,\r\n  setComment,\r\n  addComment,\r\n};\r\n\r\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}