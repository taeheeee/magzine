{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\nimport User from \"./modules/user\";\nimport Post from \"./modules/post\";\nimport Image from \"./modules/image\";\nexport const history = createBrowserHistory();\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  image: Image,\n  router: connectRouter(history)\n});\nconst middlewares = [thunk.withExtraArgument({\n  history: history\n})]; // 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\n\nconst env = process.env.NODE_ENV; // 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\n\nif (env === \"development\") {\n  const {\n    logger\n  } = require(\"redux-logger\");\n\n  middlewares.push(logger);\n}\n\nconst composeEnhancers = typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\nlet store = initialStore => createStore(rootReducer, enhancer);\n\nexport default store();","map":{"version":3,"sources":["C:/Users/coms/OneDrive/문서/GitHub/hanghae-react-intensive/week2/src/redux/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","createBrowserHistory","connectRouter","User","Post","Image","history","rootReducer","user","post","image","router","middlewares","withExtraArgument","env","process","NODE_ENV","logger","require","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store","initialStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAO,MAAMC,OAAO,GAAGL,oBAAoB,EAApC;AAEP,MAAMM,WAAW,GAAGV,eAAe,CAAC;AAChCW,EAAAA,IAAI,EAAEL,IAD0B;AAEhCM,EAAAA,IAAI,EAAEL,IAF0B;AAGhCM,EAAAA,KAAK,EAAEL,KAHyB;AAIhCM,EAAAA,MAAM,EAAET,aAAa,CAACI,OAAD;AAJW,CAAD,CAAnC;AAOA,MAAMM,WAAW,GAAG,CAACZ,KAAK,CAACa,iBAAN,CAAwB;AAAEP,EAAAA,OAAO,EAAEA;AAAX,CAAxB,CAAD,CAApB,C,CAEA;;AACA,MAAMQ,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAxB,C,CAEA;;AACA,IAAIF,GAAG,KAAK,aAAZ,EAA2B;AACvB,QAAM;AAAEG,IAAAA;AAAF,MAAaC,OAAO,CAAC,cAAD,CAA1B;;AACAN,EAAAA,WAAW,CAACO,IAAZ,CAAiBF,MAAjB;AACH;;AAED,MAAMG,gBAAgB,GAClB,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,oCAArC,GACMD,MAAM,CAACC,oCAAP,CAA4C,CACxC;AADwC,CAA5C,CADN,GAIMvB,OALV;AAMA,MAAMwB,QAAQ,GAAGH,gBAAgB,CAACtB,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAAjC;;AAEA,IAAIY,KAAK,GAAIC,YAAD,IAAkB7B,WAAW,CAACW,WAAD,EAAcgB,QAAd,CAAzC;;AAEA,eAAeC,KAAK,EAApB","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { connectRouter } from \"connected-react-router\";\r\n\r\nimport User from \"./modules/user\";\r\nimport Post from \"./modules/post\";\r\nimport Image from \"./modules/image\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst rootReducer = combineReducers({\r\n    user: User,\r\n    post: Post,\r\n    image: Image,\r\n    router: connectRouter(history),\r\n});\r\n\r\nconst middlewares = [thunk.withExtraArgument({ history: history })];\r\n\r\n// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\r\nconst env = process.env.NODE_ENV;\r\n\r\n// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\r\nif (env === \"development\") {\r\n    const { logger } = require(\"redux-logger\");\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst composeEnhancers =\r\n    typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n              // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n          })\r\n        : compose;\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\nlet store = (initialStore) => createStore(rootReducer, enhancer);\r\n\r\nexport default store();\r\n"]},"metadata":{},"sourceType":"module"}